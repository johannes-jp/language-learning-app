-- Table: Content Authorities (Information sources with elevated content management privileges)
CREATE TABLE ContentAuthorities (
    id SERIAL PRIMARY KEY, -- Unique identifier for each content authority
    organization TEXT NOT NULL UNIQUE, -- Name of the source (Wiktionary, Oxford, etc.)
    authority_link TEXT -- Link to authority homepage, which determines control over any content sourcing to their domain
);
-- Table: Relationship Types (Catalog of the large variety of contextual relationships that can exist)
CREATE TABLE RelationshipTypes (
    id SERIAL PRIMARY KEY, -- Unique identifier for each relationship type
    type TEXT, -- Translation, definition, synonym, example, lexical_root, part_of_speech, category, homonym, sign_description, list_name, etc.
    description TEXT -- Description of the relationship type
);
-- Table: Relationships
CREATE TABLE ContentRelationships (
    id BIGSERIAL PRIMARY KEY, -- Unique identifier for each content relationship
    originator BIGINT REFERENCES UserCredentials(id), -- User who created the relationship
    relationship_type TEXT REFERENCES RelationshipTypes(id), -- Type of the relationship
    member1 BIGINT REFERENCES Content(id), -- First node for relationship link
    member2 BIGINT REFERENCES Content(id), -- Second node for relationship link
    source_of_truth TEXT, -- URL to the source that justifies this relationship
    confidence FLOAT CHECK (confidence >=0 AND confidence <=1), -- How accurately the two members represent one another
    status INT REFERENCES ContentStatus(id), -- Status of the relationship
    karma INT, -- User upvotes and downvotes of entity quality
    relevance INT -- The number of times this content is studied or referenced
);
-- Table: Content Status (For assigning privileges to various forms of content)
CREATE TABLE ContentStatus (
    id SERIAL PRIMARY KEY, -- Unique identifier for each content status
    status TEXT NOT NULL UNIQUE, -- Official, admin-approved, unmoderated, pending-approval, community-favorite, flagged-for-review, etc.
    description TEXT -- Description of the content status
);
-- Table: Content
CREATE TABLE Content (
    id BIGSERIAL PRIMARY KEY, -- Unique identifier for each content item
    type ENUM('word','affix','sign','phrase','list','syllable'), -- Growing list of content types
    status INT REFERENCES ContentStatus(id), -- Status of the content item
    is_private BOOLEAN, -- Whether the content is visible to other users
    language_tag VARCHAR(50) REFERENCES Languages(language_tag), -- Language of the content
    origin ENUM('user','authority','link'), -- Origin of the content (user-generated, from authority, or linked)
    relevance INT -- The number of times this content is studied or referenced
);
-- Table: Embeddings
CREATE TABLE Embeddings (
    content_id UUID PRIMARY KEY REFERENCES Content(id), -- Unique identifier for each content item
    vector JSONB -- Content embedding vector
);
-- Table: Phrases - A phrase is a sequence of content that should have its own relationships. It can have its own media to describe itself, or be constructed by a component list of words/signs.
CREATE TABLE Phrases (
    id BIGINT PRIMARY KEY REFERENCES Content(id), -- Unique identifier for each content sequence
    phrase JSONB, -- The string of the actual sentence, or the URL to the media storing the sequence's self-contained content.
    components ARRAY, -- An ordered list of content_ids that compose the phrase.
    composite BOOLEAN, -- Whether the phrase is self-evident, or constructed from the members of the components array.
    karma INT -- User upvotes and downvotes of phrase accuracy or relevance.
);
-- Table: Signs - A sign is anything that can't be 
CREATE TABLE Signs ( -- anything that can't be 
    content_id BIGSERIAL PRIMARY KEY REFERENCES Content(id), -- Unique identifier for visual communications
    type ENUM('sign_language','street_sign','image','gesture','facial_expression','tactile_language'), -- Type of the sign
    sign_data JSONB, -- Data representing the sign, image, gesture, etc.
    context JSONB -- Flexible additional information about the sign, such as the cultural context, location where it's used, etc.
);
-- Table: Words - All morphemes go here. Usually lexemes (words), but subcomponents like suffixes and syllables are welcome here too.
CREATE TABLE Words (
    id BIGINT PRIMARY KEY REFERENCES Content(id), -- Unique identifier for each word
    word TEXT, -- The actual word
    language_tag VARCHAR(50), -- Language the word belongs to
    source_of_truth TEXT, -- URL to word's source of truth
    context JSONB -- Flexible additional exposition of the content, like URLs to image/audio/video media, etc.
);
-- Table: Languages (List of all accepted languages)
CREATE TABLE Languages (
    id SERIAL PRIMARY KEY, -- Unique identifier for each language
    language_tag VARCHAR(50) NOT NULL UNIQUE, -- BCP 47 tag for that language
    names JSONB, -- Key-value pairs where key = language tag, value = name of the language in that language
    num_speakers INT -- The estimated number of native speakers of the language
);
-- Table: List Items
CREATE TABLE ListItems (
    list_id BIGINT REFERENCES Lists(id), -- The list that the content item belongs to
    content_id BIGINT REFERENCES Content(id), -- The content in the list
    priority INT -- Priority of this content within the list
);
-- Table: Lists
CREATE TABLE Lists (
    id BIGINT REFERENCES Content(id), -- Unique identifier for each list
    status INT REFERENCES ContentStatus(id), -- Status of the list
    owner_id INT REFERENCES UserCredentials(id), -- User who controls the list
    language_tag VARCHAR(50) REFERENCES Languages(language_tag), -- Language tag that the list pertains to
    name JSONB, -- Key-value pairs where key = language tag, value = name of the list in that language
    description JSONB -- Key-value pairs where key = language tag, value = description of the list in that language
);
-- Table: Study History
CREATE TABLE StudyHistory (
    study_id BIGSERIAL PRIMARY KEY, -- Unique identifier for each instance of studied content
    user_id INT REFERENCES UserCredentials(id), -- User who studied the content
    content_id BIGINT REFERENCES Content(id), -- Content that was studied
    relationship_id BIGINT REFERENCES ContentRelationships(id), -- Target of the studied content
    source_language VARCHAR(50) REFERENCES Languages(language_tag), -- Language of the prompt or input
    target_language VARCHAR(50) REFERENCES Languages(language_tag), -- Language of the response or output
    sr_interval INT, -- Spaced repetition interval for content recall
    study_date DATE, -- Date this content was studied
    next_due_date DATE, -- When this content should be studied next, based on sr_interval
    is_private BOOLEAN -- Whether or not learning activity is visible to other users
);
-- Table: User Credentials
CREATE TABLE UserCredentials (
    id SERIAL PRIMARY KEY, -- Unique identifier for each user
    email TEXT NOT NULL UNIQUE, -- Email address of the user
    hashed_password TEXT NOT NULL, -- Hashed password for user login
    account ENUM('active','disabled') -- Whether the account is functional or not
);
-- Table: User Preferences
CREATE TABLE UserPreferences (
    id INT PRIMARY KEY REFERENCES UserCredentials(id), -- Unique identifier for each user
    interface_language VARCHAR(50) REFERENCES Languages(language_tag), -- Language in which the user wants the app interface to be displayed
    base_language VARCHAR(50) REFERENCES Languages(language_tag), -- Language of understanding and regional flavor for translated content
    learning_goals JSONB, -- Daily or weekly goals for the user's learning process
    learning_style TEXT, -- Preferred way of learning for the user, like flashcards, fill-blank, visual, audio, interactive, etc.
    notifications JSONB, -- Preferences for different types of notifications
    privacy_settings JSONB, -- User's preferences related to privacy
    theme ENUM('light', 'dark', 'system'), -- User's preferred theme for the application
    timezone TEXT -- Timezone strings
);
-- Table: User Profiles
CREATE TABLE UserProfiles (
    id INT PRIMARY KEY REFERENCES UserCredentials(id), -- User ID
    username TEXT NOT NULL UNIQUE, -- Username chosen by the user
    reputation INT, -- Measure of user contribution level
    tier ENUM('basic','standard','premium'), -- Paid tiers for feature access
    flair TEXT, -- User title, like admin, professor, student, etc.
    is_private BOOLEAN -- Whether or not user profile is visible to other users
);
-- Table: User Roles (For assigning privileges based on user status)
CREATE TABLE UserRoles (
    id SERIAL PRIMARY KEY, -- Unique identifier for each user role
    name TEXT NOT NULL UNIQUE, -- Admin, teacher, student, etc.
    description TEXT -- Description of the user role
);